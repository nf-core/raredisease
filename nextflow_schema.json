{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "https://raw.githubusercontent.com/nf-core/raredisease/master/nextflow_schema.json",
    "title": "nf-core/raredisease pipeline parameters",
    "description": "call and score variants from WGS/WES of rare disease patients",
    "type": "object",
    "definitions": {
        "input_output_options": {
            "title": "Input/output options",
            "type": "object",
            "fa_icon": "fas fa-terminal",
            "description": "Define where the pipeline should find input data and save output data.",
            "required": ["outdir"],
            "properties": {
                "input": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "schema": "assets/schema_input.json",
                    "mimetype": "text/csv",
                    "pattern": "^\\S+\\.csv$",
                    "description": "Path to comma-separated file containing information about the samples in the experiment.",
                    "help_text": "You will need to create a design file with information about the samples in your experiment before running the pipeline. Use this parameter to specify its location. It has to be a comma-separated file with 3 columns, and a header row. See [usage docs](https://nf-co.re/raredisease/usage#samplesheet-input).",
                    "fa_icon": "fas fa-file-csv"
                },
                "outdir": {
                    "type": "string",
                    "format": "directory-path",
                    "description": "The output directory where the results will be saved. You have to use absolute paths to storage on Cloud infrastructure.",
                    "fa_icon": "fas fa-folder-open",
                    "default": "results"
                },
                "email": {
                    "type": "string",
                    "description": "Email address for completion summary.",
                    "fa_icon": "fas fa-envelope",
                    "help_text": "Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits. If set in your user config file (`~/.nextflow/config`) then you don't need to specify this on the command line for every run.",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "hidden": true
                },
                "multiqc_title": {
                    "type": "string",
                    "description": "MultiQC report title. Printed as page header, used for filename if not otherwise specified.",
                    "fa_icon": "fas fa-file-signature",
                    "hidden": true
                }
            }
        },
        "reference_file_options": {
            "title": "Reference file options",
            "type": "object",
            "fa_icon": "fas fa-dna",
            "description": "Reference genome related files and options required for the workflow.",
            "properties": {
                "bait_padding": {
                    "type": "integer",
                    "default": 100,
                    "fa_icon": "fas fa-align-center",
                    "pattern": "^\\S+\\.bed(\\.gz)?$",
                    "description": "The amount to pad each end of the target intervals to create bait intervals."
                },
                "bwa": {
                    "type": "string",
                    "exists": true,
                    "format": "directory-path",
                    "description": "Directory for pre-built bwa index.",
                    "help_text": "If none provided, will be generated automatically from the FASTA reference.",
                    "fa_icon": "fas fa-folder-open"
                },
                "bwamem2": {
                    "type": "string",
                    "exists": true,
                    "format": "directory-path",
                    "description": "Directory for pre-built bwamem2 index.",
                    "help_text": "If none provided, will be generated automatically from the FASTA reference.",
                    "fa_icon": "fas fa-folder-open"
                },
                "cadd_resources": {
                    "type": "string",
                    "exists": true,
                    "format": "directory-path",
                    "fa_icon": "fas fa-file",
                    "description": "Path to the directory containing cadd annotations.",
                    "help_text": "This folder contains the uncompressed files that would otherwise be in data/annotation folder as described in https://github.com/kircherlab/CADD-scripts/#manual-installation."
                },
                "fai": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "help_text": "If none provided, will be generated automatically from the FASTA reference",
                    "description": "Path to FASTA genome index file.",
                    "pattern": "^\\S+\\.fn?a(sta)?\\.fai$",
                    "fa_icon": "fas fa-file"
                },
                "fasta": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "mimetype": "text/plain",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "description": "Path to FASTA genome file.",
                    "help_text": "This parameter is *mandatory* if `--genome` is not specified. If you don't have a BWA index available this will be generated for you automatically. Combine with `--save_reference` to save BWA index for future runs.",
                    "fa_icon": "fas fa-file"
                },
                "gcnvcaller_model": {
                    "type": "string",
                    "exists": true,
                    "fa_icon": "fas fa-file",
                    "description": "A file containing the path to models produced by GATK4 GermlineCNVCaller cohort.",
                    "format": "file-path",
                    "help_text": "This model is required for generating a cnv calls when using GermlineCNVCaller."
                },
                "genome": {
                    "type": "string",
                    "description": "Name of iGenomes reference.",
                    "fa_icon": "fas fa-align-center",
                    "help_text": "If using a reference genome configured in the pipeline using iGenomes, use this parameter to give the ID for the reference. This is then used to build the full paths for all required reference genome files e.g. `--genome GRCh38`. \n\nSee the [nf-core website docs](https://nf-co.re/usage/reference_genomes) for more details.",
                    "default": "GRCh38",
                    "enum": ["GRCh37", "GRCh38"]
                },
                "gens_gnomad_pos": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "fa_icon": "fas fa-file",
                    "description": "Path to a list of common SNP locations for Gens.",
                    "help_text": "Locations of gnomad SNPs with a high enough BAF.",
                    "hidden": true
                },
                "gens_interval_list": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "fa_icon": "fas fa-file",
                    "description": "Path to interval list for Gens.",
                    "help_text": "This file contains the binning intervals used for CollectReadCounts.",
                    "hidden": true
                },
                "gens_pon_female": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "fa_icon": "fas fa-file",
                    "description": "Path to female panel of normals for Gens.",
                    "help_text": "The female panel used to run DenoiseReadCounts.",
                    "hidden": true
                },
                "gens_pon_male": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "fa_icon": "fas fa-file",
                    "description": "Path to male panel of normals for Gens.",
                    "help_text": "The male panel used to run DenoiseReadCounts.",
                    "hidden": true
                },
                "gnomad_af": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "pattern": "^\\S+\\.tab(\\.gz)?$",
                    "description": "Path to the gnomad tab file with allele frequencies.",
                    "help_text": "Path to the gnomad tab file with CHR/START/REF,ALT/AF. Can be generated from the gnomad annotations vcf."
                },
                "gnomad_af_idx": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "pattern": "^\\S+\\.bed(\\.gz)?\\.idx$",
                    "description": "Path to the index file for the gnomad tab file with allele frequencies.",
                    "help_text": "Path to the index of gnomad tab file with CHR/START/REF,ALT/AF"
                },
                "igenomes_ignore": {
                    "type": "boolean",
                    "description": "Do not load the iGenomes reference config.",
                    "fa_icon": "fas fa-ban",
                    "help_text": "Do not load `igenomes.config` when running the pipeline. You may choose this option if you observe clashes between custom parameters and those supplied in `igenomes.config`."
                },
                "intervals_wgs": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "pattern": "^\\S+\\.intervals?(_list)?$",
                    "description": "Path to the interval list of the genome (autosomes, sex chromosomes, and mitochondria).",
                    "help_text": "Path to the interval list of the genome. This is used to calculate genome-wide coverage statistics."
                },
                "intervals_y": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "pattern": "^\\S+\\.intervals?(_list)?$",
                    "description": "Path to the interval list of the Y chromosome.",
                    "help_text": "Path to the interval list of the Y chromosome. This is used to calculate coverage statistics for the Y chromosome."
                },
                "known_dbsnp": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "pattern": "^\\S+\\.vcf(\\.gz)?$",
                    "description": "Path to known dbSNP file."
                },
                "known_dbsnp_tbi": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "pattern": "^\\S+\\.vcf(\\.gz)?\\.tbi$",
                    "description": "Path to known dbSNP file index."
                },
                "local_genomes": {
                    "type": "string",
                    "format": "directory-path",
                    "fa_icon": "fas fa-map-marker-alt",
                    "description": "Local directory base for genome references that map to the config.",
                    "help_text": "This folder is a flat structure with file names that map to the config."
                },
                "mito_name": {
                    "type": "string",
                    "description": "Name of the mitochondrial contig in the reference fasta file",
                    "help_text": "Used to extract relevant information from the references to analyse mitochondria",
                    "fa_icon": "fas fa-align-center",
                    "default": "chrM"
                },
                "mobile_element_references": {
                    "type": "string",
                    "fa_icon": "fas fa-file",
                    "description": "File with mobile element references",
                    "help_text": "Path to tsv file listing mobile element references. \nFormat: <mobile element type>\\t<path to bed file>",
                    "pattern": "^\\S+\\.tsv$",
                    "format": "file-path",
                    "schema": "assets/mobile_element_references_schema.json"
                },
                "mobile_element_svdb_annotations": {
                    "type": "string",
                    "description": "File with mobile element allele frequency references",
                    "help_text": "Path to csv file listing files containing mobile element allele frequencies in reference populations. \nFormat: <vcf file path>,<in_freq_info_key>,<in_allele_count_info_key>,<out_freq_info_key>,<out_allele_count_info_key>",
                    "fa_icon": "fas fa-file",
                    "pattern": "^\\S+\\.csv$",
                    "mimetype": "text/csv",
                    "schema": "assets/svdb_query_vcf_schema.json"
                },
                "ml_model": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "description": "Path to sentieon machine learning model file."
                },
                "mt_fasta": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "mimetype": "text/plain",
                    "pattern": "^\\S+\\.fn?a(sta)?(\\.gz)?$",
                    "description": "Path to mitochondrial FASTA genome file.",
                    "fa_icon": "fas fa-file"
                },
                "ploidy_model": {
                    "type": "string",
                    "exists": true,
                    "fa_icon": "fas fa-folder-open",
                    "description": "Directory containing the ploidy model files",
                    "format": "directory-path",
                    "help_text": "Produced in GATK4 DetermineGermlineContigPloidy cohort, this model is required for generating a cnv model when using GermlineCNVCaller."
                },
                "readcount_intervals": {
                    "type": "string",
                    "exists": true,
                    "fa_icon": "fas fa-file",
                    "description": "Interval list file containing the intervals over which read counts are tabulated for CNV calling",
                    "format": "file-path",
                    "help_text": "Generated by GATK4 preprocessintervals. If absent, pipeline can generate this file."
                },
                "reduced_penetrance": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file-csv",
                    "description": "File with gene ids that have reduced penetrance. For use with genmod"
                },
                "rtg_truthvcfs": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "description": "Vcf used for evaluating variant calls.",
                    "fa_icon": "fas fa-file-csv",
                    "help_text": "Path to comma-separated file containing information about the truth vcf files used by vcfeval.",
                    "pattern": "^\\S+\\.csv$",
                    "mimetype": "text/csv",
                    "schema": "assets/rtg_truthvcfs_schema.json"
                },
                "save_reference": {
                    "type": "boolean",
                    "description": "If generated by the pipeline save the required indices/references in the results directory.",
                    "help_text": "The saved references can be used for future pipeline runs, reducing processing times.",
                    "fa_icon": "fas fa-save"
                },
                "score_config_mt": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "description": "MT rank model config file for genmod."
                },
                "score_config_snv": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "description": "SNV rank model config file for genmod."
                },
                "score_config_sv": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "description": "SV rank model config file for genmod."
                },
                "sdf": {
                    "type": "string",
                    "exists": true,
                    "format": "directory-path",
                    "description": "Directory for pre-built sdf index. Used by rtg/vcfeval",
                    "help_text": "If none provided, will be generated automatically from the FASTA reference.",
                    "fa_icon": "fas fa-folder-open"
                },
                "sequence_dictionary": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "pattern": "^\\S+\\.dict$",
                    "description": "Path to the genome dictionary file"
                },
                "svdb_query_bedpedbs": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "description": "Databases used for structural variant annotation in chrA-posA-chrB-posB-type-count-frequency format.",
                    "fa_icon": "fas fa-file-csv",
                    "help_text": "Path to comma-separated file containing information about the databases used for structural variant annotation.",
                    "pattern": "^\\S+\\.csv$",
                    "mimetype": "text/csv",
                    "schema": "assets/svdb_query_bedpe_schema.json"
                },
                "svdb_query_dbs": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "description": "Databases used for structural variant annotation in vcf format.",
                    "fa_icon": "fas fa-file-csv",
                    "help_text": "Path to comma-separated file containing information about the databases used for structural variant annotation.",
                    "pattern": "^\\S+\\.csv$",
                    "mimetype": "text/csv",
                    "schema": "assets/svdb_query_vcf_schema.json"
                },
                "target_bed": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file",
                    "pattern": "^\\S+\\.bed(\\.gz)?$",
                    "description": "Path to directory for target bed file.",
                    "help_text": "If you would like to limit your analysis to specific regions of the genome, you can pass those regions in a bed file using this option"
                },
                "variant_catalog": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "description": "Path to variant catalog file",
                    "help_text": "Should be Stranger's extended JSON as described at https://github.com/Clinical-Genomics/stranger/blob/master/stranger/resources/variant_catalog_grch37.json. This file is used by both ExpansionHunter and Stranger",
                    "fa_icon": "fas fa-file"
                },
                "sample_id_map": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "description": "Path to a file containing internal ids and customer ids in csv format.",
                    "fa_icon": "fas fa-file-csv",
                    "mimetype": "text/csv",
                    "schema": "assets/sample_id_map.json",
                    "help_text": "Optional file to rename sample ids in the vcf2cytosure vcf",
                    "pattern": "^\\S+\\.csv$"
                },
                "vcf2cytosure_blacklist": {
                    "type": "string",
                    "help_text": "Optional file to blacklist regions for VCF2cytosure",
                    "pattern": "^\\S+\\.bed$",
                    "format": "file-path",
                    "fa_icon": "fas fa-file",
                    "description": "Path to vcf2cytosure blacklist file"
                },
                "vcfanno_resources": {
                    "type": "string",
                    "exists": true,
                    "description": "Path to a file containing the absolute paths to resources defined within the vcfanno toml file. One line per resource.",
                    "help_text": "If no file is passed, default configurations will be used according to genome build within the context of the pipeline.",
                    "fa_icon": "fas fa-file"
                },
                "vcfanno_toml": {
                    "type": "string",
                    "exists": true,
                    "description": "Path to the vcfanno toml file.",
                    "pattern": "^\\S+\\.toml$",
                    "help_text": "If no toml is passed, default configurations will be used according to genome build within the context of the pipeline.",
                    "fa_icon": "fas fa-file"
                },
                "vcfanno_lua": {
                    "type": "string",
                    "exists": true,
                    "description": "Path to the vcfanno lua file.",
                    "pattern": "^\\S+\\.lua$",
                    "help_text": "Custom operations file (lua). For use when the built-in ops don't supply the needed reduction.",
                    "fa_icon": "fas fa-file"
                },
                "vep_cache": {
                    "type": "string",
                    "exists": true,
                    "description": "Path to vep's cache directory.",
                    "help_text": "If no directory path is passed, vcf files will not be annotated by vep.",
                    "fa_icon": "fas fa-folder-open"
                },
                "vep_plugin_files": {
                    "type": "string",
                    "exists": true,
                    "format": "file-path",
                    "description": "Databases used by both named and custom plugins to annotate variants.",
                    "fa_icon": "fas fa-file-csv",
                    "help_text": "Path to a file containing the absolute paths to databases and their indices used by VEP's custom and named plugins resources defined within the vcfanno toml file. One line per resource.",
                    "pattern": "^\\S+\\.csv$",
                    "mimetype": "text/csv",
                    "schema": "assets/vep_plugin_files_schema.json"
                },
                "vep_filters": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-file-csv",
                    "description": "Path to the file containing HGNC_IDs of interest on separate lines."
                },
                "vep_filters_scout_fmt": {
                    "type": "string",
                    "exists": true,
                    "format": "path",
                    "fa_icon": "fas fa-table",
                    "description": "Path to a bed-like file exported by scout, which contains HGNC_IDs to be used in filter_vep."
                }
            }
        },
        "analysis_options": {
            "title": "Analysis options",
            "type": "object",
            "fa_icon": "fas fa-user-cog",
            "description": "Options used to steer the direction of the pipeline.",
            "properties": {
                "analysis_type": {
                    "type": "string",
                    "default": "wgs",
                    "description": "Specifies which analysis type for the pipeline- either 'wgs','wes','mito'. This changes resources consumed and tools used.",
                    "fa_icon": "fas fa-align-center",
                    "enum": ["wgs", "wes", "mito"]
                },
                "platform": {
                    "type": "string",
                    "default": "illumina",
                    "description": "Specifies which analysis type for the pipeline- either 'wgs','wes','mito'. This changes resources consumed and tools used.",
                    "fa_icon": "fas fa-align-center",
                    "enum": ["illumina"]
                },
                "ngsbits_samplegender_method": {
                    "type": "string",
                    "default": "xy",
                    "description": "Method selection for ngs-bits samplegender",
                    "fa_icon": "fas fa-align-center",
                    "enum": ["xy", "hetx", "sry"]
                },
                "run_rtgvcfeval": {
                    "type": "boolean",
                    "description": "Specifies whether to run rtgtools' vcfeval",
                    "fa_icon": "fas fa-toggle-on"
                },
                "save_mapped_as_cram": {
                    "type": "boolean",
                    "description": "Specifies whether to generate and publish alignment files as cram instead of bam",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_fastqc": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip FASTQC.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_fastp": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip trimming with fastp.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_haplocheck": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip haplocheck.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_gens": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip gens preprocessing subworkflow.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_germlinecnvcaller": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip CNV calling using GATK's GermlineCNVCaller",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_eklipse": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip eKLIPse.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_peddy": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip peddy.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_qualimap": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip Qualimap.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_me_annotation": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip annotation of mobile_elements.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_mt_annotation": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip annotation of mitochondrial variants.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_mt_subsample": {
                    "type": "boolean",
                    "description": "Specifies whether or not to subsample mt alignment.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_snv_annotation": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip annotate SNV subworkflow.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_sv_annotation": {
                    "type": "boolean",
                    "description": "Specifies whether or not to skip annotate structural variant subworkflow.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_vcf2cytosure": {
                    "type": "boolean",
                    "default": true,
                    "description": "Specifies whether or not to skip the vcf2cytosure subworkflow",
                    "help_text": "vcf2cytosure can generate CGH files from a structural variant VCF file that can be analysed in the CytoSure interpretation software. Cut-offs for allele frequencies and bin sizes can be modified in the config file. Turned off by default.",
                    "fa_icon": "fas fa-toggle-on"
                },
                "skip_vep_filter": {
                    "type": "boolean",
                    "description": "Specifies whether or not to filter results based on a list of candidate genes specified in 'vep_filters'.",
                    "fa_icon": "fas fa-toggle-on"
                }
            }
        },
        "alignment_options": {
            "title": "Alignment options",
            "type": "object",
            "fa_icon": "fas fa-map-signs",
            "description": "Options to adjust parameters and filtering criteria for read alignments.",
            "properties": {
                "aligner": {
                    "type": "string",
                    "default": "bwamem2",
                    "description": "Specifies the alignment algorithm to use - available options are 'bwamem2' and 'sentieon'.",
                    "fa_icon": "fas fa-align-center",
                    "enum": ["bwa", "bwamem2", "sentieon"]
                },
                "min_trimmed_length": {
                    "type": "integer",
                    "default": 40,
                    "description": "Discard trimmed reads shorter than the given value",
                    "help_text": "Minimum length of reads after adapter trimming. Shorter reads are discarded.",
                    "fa_icon": "fas fa-less-than"
                },
                "mt_subsample_rd": {
                    "type": "integer",
                    "default": 150,
                    "description": "Expected coverage to subsample mt alignment to.",
                    "help_text": "To know more about this parameter check [samtools' view](https://www.htslib.org/doc/samtools-view.html) documentation.",
                    "fa_icon": "fas fa-less-than"
                },
                "mt_subsample_seed": {
                    "type": "integer",
                    "default": 30,
                    "description": "Subsampling seed used to influence which subset of mitochondrial reads is kept. ",
                    "help_text": "To know more about this parameter check [samtools' view](https://www.htslib.org/doc/samtools-view.html) documentation.",
                    "fa_icon": "fas fa-less-than"
                },
                "rmdup": {
                    "type": "boolean",
                    "description": "Specifies whether duplicates reads should be removed prior to variant calling.",
                    "fa_icon": "fas fa-toggle-on"
                }
            }
        },
        "variant_calling_options": {
            "title": "Variant calling options",
            "type": "object",
            "fa_icon": "fas fa-map-signs",
            "description": "Options to adjust parameters and filtering criteria for variant calling.",
            "properties": {
                "call_interval": {
                    "type": "string",
                    "format": "path",
                    "fa_icon": "fas fa-align-center",
                    "description": "Interval in the reference that will be used in the software"
                },
                "cnvnator_binsize": {
                    "type": "integer",
                    "description": "Bin size for CNVnator",
                    "default": 1000,
                    "fa_icon": "fas fa-align-center"
                },
                "sentieon_dnascope_pcr_indel_model": {
                    "type": "string",
                    "default": "CONSERVATIVE",
                    "fa_icon": "fas fa-bacon",
                    "description": "Option for selecting the PCR indel model used by Sentieon Dnascope.",
                    "help_text": "PCR indel model used to weed out false positive indels more or less aggressively. The possible MODELs are: NONE (used for PCR free samples), and HOSTILE, AGGRESSIVE and CONSERVATIVE, in order of decreasing aggressiveness. The default value is CONSERVATIVE.",
                    "enum": ["NONE", "HOSTILE", "AGGRESSIVE", "CONSERVATIVE"]
                },
                "variant_caller": {
                    "type": "string",
                    "default": "deepvariant",
                    "description": "Specifies the variant caller to use - available options are 'deepvariant' and 'sentieon'.",
                    "fa_icon": "fas fa-random",
                    "enum": ["deepvariant", "sentieon"]
                },
                "variant_type": {
                    "type": "string",
                    "default": "snp,indel",
                    "description": "Specifies the variant types for sentieon variant caller.",
                    "fa_icon": "fas fa-align-center",
                    "enum": ["snp", "indel", "snp,indel"]
                }
            }
        },
        "annotation_options": {
            "title": "Annotation options",
            "type": "object",
            "fa_icon": "fas fa-user-cog",
            "description": "Options used to facilitate the annotation of the variants.",
            "properties": {
                "variant_consequences_snv": {
                    "type": "string",
                    "description": "File containing list of SO terms listed in the order of severity from most severe to lease severe for annotating genomic and mitochondrial SNVs.",
                    "help_text": "For more information check https://grch37.ensembl.org/info/genome/variation/prediction/predicted_data.html",
                    "fa_icon": "fas fa-file-csv"
                },
                "variant_consequences_sv": {
                    "type": "string",
                    "description": "File containing list of SO terms listed in the order of severity from most severe to lease severe for annotating genomic SVs.",
                    "help_text": "For more information check https://grch37.ensembl.org/info/genome/variation/prediction/predicted_data.html",
                    "fa_icon": "fas fa-file-csv"
                },
                "vep_cache_version": {
                    "type": "integer",
                    "default": 110,
                    "description": "Specify the version of the VEP cache provided to the `--vep_cache` option.",
                    "fa_icon": "fas fa-align-center",
                    "enum": [107, 110]
                }
            }
        },
        "institutional_config_options": {
            "title": "Institutional config options",
            "type": "object",
            "fa_icon": "fas fa-university",
            "description": "Parameters used to describe centralised config profiles. These should not be edited.",
            "help_text": "The centralised nf-core configuration profiles use a handful of pipeline parameters to describe themselves. This information is then printed to the Nextflow log when you run a pipeline. You should not need to change these values when you run a pipeline.",
            "properties": {
                "custom_config_version": {
                    "type": "string",
                    "description": "Git commit id for Institutional configs.",
                    "default": "master",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "custom_config_base": {
                    "type": "string",
                    "description": "Base directory for Institutional configs.",
                    "default": "https://raw.githubusercontent.com/nf-core/configs/master",
                    "hidden": true,
                    "help_text": "If you're running offline, Nextflow will not be able to fetch the institutional config files from the internet. If you don't need them, then this is not a problem. If you do need them, you should download the files from the repo and tell Nextflow where to find them with this parameter.",
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_name": {
                    "type": "string",
                    "description": "Institutional config name.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_description": {
                    "type": "string",
                    "description": "Institutional config description.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_contact": {
                    "type": "string",
                    "description": "Institutional config contact information.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                },
                "config_profile_url": {
                    "type": "string",
                    "description": "Institutional config URL link.",
                    "hidden": true,
                    "fa_icon": "fas fa-users-cog"
                }
            }
        },
        "max_job_request_options": {
            "title": "Max job request options",
            "type": "object",
            "fa_icon": "fab fa-acquisitions-incorporated",
            "description": "Set the top limit for requested resources for any single job.",
            "help_text": "If you are running on a smaller system, a pipeline step requesting more resources than are available may cause the Nextflow to stop the run with an error. These options allow you to cap the maximum resources requested by any single job so that the pipeline will run on your system.\n\nNote that you can not _increase_ the resources requested by any job using these options. For that you will need your own configuration file. See [the nf-core website](https://nf-co.re/usage/configuration) for details.",
            "properties": {
                "max_cpus": {
                    "type": "integer",
                    "description": "Maximum number of CPUs that can be requested for any single job.",
                    "default": 16,
                    "fa_icon": "fas fa-microchip",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the CPU requirement for each process. Should be an integer e.g. `--max_cpus 1`"
                },
                "max_memory": {
                    "type": "string",
                    "description": "Maximum amount of memory that can be requested for any single job.",
                    "default": "128.GB",
                    "fa_icon": "fas fa-memory",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the memory requirement for each process. Should be a string in the format integer-unit e.g. `--max_memory '8.GB'`"
                },
                "max_time": {
                    "type": "string",
                    "description": "Maximum amount of time that can be requested for any single job.",
                    "default": "240.h",
                    "fa_icon": "far fa-clock",
                    "pattern": "^(\\d+\\.?\\s*(s|m|h|d|day)\\s*)+$",
                    "hidden": true,
                    "help_text": "Use to set an upper-limit for the time requirement for each process. Should be a string in the format integer-unit e.g. `--max_time '2.h'`"
                }
            }
        },
        "generic_options": {
            "title": "Generic options",
            "type": "object",
            "fa_icon": "fas fa-file-import",
            "description": "Less common options for the pipeline, typically set in a config file.",
            "help_text": "These options are common to all nf-core pipelines and allow you to customise some of the core preferences for how the pipeline runs.\n\nTypically these options would be set in a Nextflow config file loaded for all pipeline runs, such as `~/.nextflow/config`.",
            "properties": {
                "help": {
                    "type": "boolean",
                    "description": "Display help text.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "version": {
                    "type": "boolean",
                    "description": "Display version and exit.",
                    "fa_icon": "fas fa-question-circle",
                    "hidden": true
                },
                "publish_dir_mode": {
                    "type": "string",
                    "default": "copy",
                    "description": "Method used to save pipeline results to output directory.",
                    "help_text": "The Nextflow `publishDir` option specifies which intermediate files should be saved to the output directory. This option tells the pipeline what method should be used to move these files. See [Nextflow docs](https://www.nextflow.io/docs/latest/process.html#publishdir) for details.",
                    "fa_icon": "fas fa-copy",
                    "enum": ["symlink", "rellink", "link", "copy", "copyNoFollow", "move"],
                    "hidden": true
                },
                "email_on_fail": {
                    "type": "string",
                    "description": "Email address for completion summary, only when pipeline fails.",
                    "fa_icon": "fas fa-exclamation-triangle",
                    "pattern": "^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
                    "help_text": "An email address to send a summary email to when the pipeline is completed - ONLY sent if the pipeline does not exit successfully.",
                    "hidden": true
                },
                "plaintext_email": {
                    "type": "boolean",
                    "description": "Send plain-text email instead of HTML.",
                    "fa_icon": "fas fa-remove-format",
                    "hidden": true
                },
                "max_multiqc_email_size": {
                    "type": "string",
                    "description": "File size limit when attaching MultiQC reports to summary emails.",
                    "pattern": "^\\d+(\\.\\d+)?\\.?\\s*(K|M|G|T)?B$",
                    "default": "25.MB",
                    "fa_icon": "fas fa-file-upload",
                    "hidden": true
                },
                "monochrome_logs": {
                    "type": "boolean",
                    "description": "Do not use coloured log outputs.",
                    "fa_icon": "fas fa-palette",
                    "hidden": true
                },
                "hook_url": {
                    "type": "string",
                    "description": "Incoming hook URL for messaging service",
                    "fa_icon": "fas fa-people-group",
                    "help_text": "Incoming hook URL for messaging service. Currently, MS Teams and Slack are supported.",
                    "hidden": true
                },
                "multiqc_config": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "description": "Custom config file to supply to MultiQC.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "multiqc_logo": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "description": "Custom logo file to supply to MultiQC. File name must also be set in the MultiQC config file",
                    "fa_icon": "fas fa-image",
                    "hidden": true
                },
                "multiqc_methods_description": {
                    "type": "string",
                    "format": "file-path",
                    "exists": true,
                    "description": "Custom MultiQC yaml file containing HTML including a methods description.",
                    "fa_icon": "fas fa-cog",
                    "hidden": true
                },
                "validate_params": {
                    "type": "boolean",
                    "description": "Boolean whether to validate parameters against the schema at runtime",
                    "default": true,
                    "fa_icon": "fas fa-check-square",
                    "hidden": true
                },
                "validationShowHiddenParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-eye-slash",
                    "description": "Show all params when using `--help`",
                    "hidden": true,
                    "help_text": "By default, parameters set as _hidden_ in the schema are not shown on the command line when a user runs with `--help`. Specifying this option will tell the pipeline to show all parameters."
                },
                "validationFailUnrecognisedParams": {
                    "type": "boolean",
                    "fa_icon": "far fa-check-circle",
                    "description": "Validation of parameters fails when an unrecognised parameter is found.",
                    "hidden": true,
                    "help_text": "By default, when an unrecognised parameter is found, it returns a warinig."
                },
                "validationLenientMode": {
                    "type": "boolean",
                    "fa_icon": "far fa-check-circle",
                    "description": "Validation of parameters in lenient more.",
                    "hidden": true,
                    "help_text": "Allows string values that are parseable as numbers or booleans. For further information see [JSONSchema docs](https://github.com/everit-org/json-schema#lenient-mode)."
                }
            }
        }
    },
    "allOf": [
        {
            "$ref": "#/definitions/input_output_options"
        },
        {
            "$ref": "#/definitions/reference_file_options"
        },
        {
            "$ref": "#/definitions/analysis_options"
        },
        {
            "$ref": "#/definitions/alignment_options"
        },
        {
            "$ref": "#/definitions/variant_calling_options"
        },
        {
            "$ref": "#/definitions/annotation_options"
        },
        {
            "$ref": "#/definitions/institutional_config_options"
        },
        {
            "$ref": "#/definitions/max_job_request_options"
        },
        {
            "$ref": "#/definitions/generic_options"
        }
    ]
}
