/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
        ext.when            = Conditional clause
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: '.*CHECK_INPUT:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

//
// Read QC options
//

process {
    withName: 'FASTQC' {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/reports/fastqc/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// Genome preparation options
//

process {
    withName: '.*PREPARE_REFERENCES:BWAMEM2_INDEX_GENOME' {
        ext.when = {!params.bwamem2_index && params.aligner == "bwamem2"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]
    }

    withName: '.*PREPARE_REFERENCES:BWAMEM2_INDEX_SHIFT_MT' {
        ext.when = {!params.mt_bwamem2_index_shift && params.mt_fasta_shift && !(params.analysis_type == "wes") && params.aligner == "bwamem2"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]
    }

    withName: '.*PREPARE_REFERENCES:SENTIEON_BWAINDEX_GENOME' {
        ext.when = {!params.bwa_index && params.aligner == "sentieon"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:SENTIEON_BWAINDEX_SHIFT_MT' {
        ext.when = {!params.mt_bwa_index_shift && params.mt_fasta_shift && !(params.analysis_type == "wes") && params.aligner == "sentieon"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:BWA_INDEX_GENOME' {
        ext.when = {!params.bwa_index && !(params.aligner == "sentieon")}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:SAMTOOLS_FAIDX_GENOME' {
        ext.when = {!params.fasta_fai}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
    }

    withName: '.*PREPARE_REFERENCES:SAMTOOLS_FAIDX_SHIFT_MT' {
        ext.when = {!params.mt_fai_shift && params.mt_fasta_shift && !(params.analysis_type == "wes")}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
    }

    withName: '.*PREPARE_REFERENCES:GATK_SD' {
        ext.when = {!params.sequence_dictionary}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*dict"
        ]
    }

    withName: '.*PREPARE_REFERENCES:GATK_SD_SHIFT_MT' {
        ext.when = {!params.mt_sequence_dictionary_shift && params.mt_fasta_shift && !(params.analysis_type == "wes")}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*dict"
        ]
    }

    withName: '.*PREPARE_REFERENCES:GET_CHROM_SIZES' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:TABIX_DBSNP' {
        ext.when = {params.known_dbsnp && !params.known_dbsnp_tbi}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*tbi"
        ]
    }

    withName: '.*PREPARE_REFERENCES:TABIX_GNOMAD_AF' {
        ext.when = {params.gnomad_af && !params.gnomad_af_idx}
        ext.args   = '-s 1 -b 2 -e 2'
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*tbi"
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:CHECK_INPUT_VCF' {
        ext.when = {params.gnomad_vcf}
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:SPLIT_MULTIALLELICS_PV' {
        ext.when = {params.gnomad_vcf}
        ext.args = '--output-type z --multiallelics -both'
        ext.prefix = { "${meta.id}_split" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:REMOVE_DUPLICATES_PV' {
        ext.when = {params.gnomad_vcf}
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:TABIX_PV' {
        ext.when = {params.gnomad_vcf}
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:TABIX_PT' {
        ext.when = { params.target_bed && params.target_bed.endsWith(".gz") }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:TABIX_PBT' {
        ext.when = { params.target_bed && !params.target_bed.endsWith(".gz") }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:GATK_BILT' {
        ext.when = { params.target_bed }
        ext.prefix = { "${meta.id}_target" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:GATK_ILT' {
        ext.when = { params.target_bed }
        ext.args = '--PADDING 100 -SUBDIVISION_MODE INTERVAL_SUBDIVISION --SCATTER_COUNT 2'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*PREPARE_REFERENCES:CAT_CAT_BAIT' {
        ext.when = { params.target_bed }
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}

//
// Create bed and interval files for scatter operations
//

process {
    withName: '.*SCATTER_GENOME:BUILD_BED' {
        ext.when = { params.annotate_snv_switch && !(params.analysis_type == "wes")}
    }

    withName: '.*SCATTER_GENOME:GATK4_SPLITINTERVALS' {
        ext.args = { "--subdivision-mode BALANCING_WITHOUT_INTERVAL_SUBDIVISION --scatter-count 22" }
        ext.when = { params.annotate_snv_switch && !(params.analysis_type == "wes")}
        ext.prefix = { "${meta.id}_genome_intervals" }
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Bwamem2 alignment options
//

process {
    withName: '.*ALIGN_BWAMEM2:.*' {
        ext.when = params.aligner.equals("bwamem2")
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            mode: 'copy',
            pattern: "*{stats,sorted_md.bam,sorted_md.bam.bai}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:BWAMEM2_MEM' {
        ext.args = { "-M -K 100000000 -R ${meta.read_group}" }
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            enabled: false,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:SAMTOOLS_STATS' {
        ext.args = '-s --remove-overlaps'
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:SAMTOOLS_MERGE' {
        ext.prefix = { "${meta.id}_sorted_merged" }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:MARKDUPLICATES' {
        ext.prefix = { "${meta.id}_sorted_md" }
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

}

//
// Sentieon alignment options
//

process {
    withName: '.*ALIGN_SENTIEON:.*' {
        ext.when = params.aligner.equals("sentieon")
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_BWAMEM' {
        ext.args = { "-M -K 10000000 -R ${meta.read_group} " }
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/sentieon_align" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_DATAMETRICS' {
        publishDir = [
            path: { "${params.outdir}/sentieon_bam_metrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_LOCUSCOLLECTOR' {
        publishDir = [
            path: { "${params.outdir}/sentieon_dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_DEDUP' {
        ext.args = { $params.rmdup ? "--rmdup" : '' }
        publishDir = [
            path: { "${params.outdir}/sentieon_dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_BQSR' {
        publishDir = [
            path: { "${params.outdir}/sentieon_recal" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Sentieon SNV calling options
//

process {
    withName: '.*CALL_SNV_SENTIEON:.*' {
        ext.when = params.variant_caller.equals("sentieon")
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:SENTIEON_DNASCOPE' {
        ext.args2  = { [
            params.variant_type  ? "--var_type ${params.variant_type}"  : '',
            params.pcrfree       ? "--pcr_indel_model NONE"             : ''
        ].join(" ") }
        publishDir = [
            path: { "${params.outdir}/sentieon_dnascope" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:SENTIEON_DNAMODELAPPLY' {
        ext.when = { params.ml_model }
        publishDir = [
            path: { "${params.outdir}/sentieon_dnamodelapply" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:BCF_FILTER_ONE' {
        ext.args = "-s 'ML_FAIL' -i 'INFO/ML_PROB <= 0.95' -m x -Oz"
        ext.prefix = { "${meta.id}_mlfiltered_0.95" }
        publishDir = [
            path: { "${params.outdir}/sentieon_filter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:BCF_FILTER_TWO' {
        ext.args = "-i FILTER='\"PASS\"' -m x -Oz"
        ext.prefix = { "${meta.id}_passed" }
        publishDir = [
            path: { "${params.outdir}/sentieon_filter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:SPLIT_MULTIALLELICS_SEN' {
        ext.args = '--output-type z --multiallelics -both'
        ext.prefix = { "${meta.id}_split" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:REMOVE_DUPLICATES_SEN' {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/sentieon_normvcf" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV_SENTIEON:TABIX_SEN' {
        publishDir = [
            path: { "${params.outdir}/sentieon_normvcf" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Bam QC options
//

process {
    withName: '.*QC_BAM:PICARD_COLLECTMULTIPLEMETRICS' {
        publishDir = [
            path: { "${params.outdir}/bamqc_collectmultiplemetrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:QUALIMAP_BAMQC' {
        publishDir = [
            path: { "${params.outdir}/bamqc_qualimap" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*QC_BAM:TIDDIT_COV' {
        ext.args = '-z 500 -w'
        publishDir = [
            path: { "${params.outdir}/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:UCSC_WIGTOBIGWIG' {
        ext.args = '-clip'
        publishDir = [
            path: { "${params.outdir}/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:MOSDEPTH' {
        ext.args = '--d4'
        publishDir = [
            path: { "${params.outdir}/mosdepth" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:PICARD_COLLECTWGSMETRICS' {
        ext.when = params.aligner.equals("bwamem2")
        publishDir = [
            path: { "${params.outdir}/bamqc_collectwgsmetrics_wg" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:PICARD_COLLECTWGSMETRICS_Y' {
        ext.when = params.aligner.equals("bwamem2")
        publishDir = [
            path: { "${params.outdir}/bamqc_collectwgsmetrics_y" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:SENTIEON_WGSMETRICS' {
        ext.when = params.aligner.equals("sentieon")
        ext.args = { (params.genome == "GRCh37") ? "--interval 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y,MT" : "--interval chr1,chr2,chr3,chr4,chr5,chr6,chr7,chr8,chr9,chr10,chr11,chr12,chr13,chr14,chr15,chr16,chr17,chr18,chr19,chr20,chr21,chr22,chrX,chrY,chrM" }
        publishDir = [
            path: { "${params.outdir}/bamqc_collectwgsmetrics_wg" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:SENTIEON_WGSMETRICS_Y' {
        ext.when = params.aligner.equals("sentieon")
        ext.args = { (params.genome == "GRCh37") ? "--interval Y" : "--interval chrY" }
        publishDir = [
            path: { "${params.outdir}/bamqc_collectwgsmetrics_y" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// Repeat expansion calling options
//

process {
    withName: '.*CALL_REPEAT_EXPANSIONS:EXPANSIONHUNTER' {
        publishDir = [
            path: { "${params.outdir}/expansionhunter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*CALL_REPEAT_EXPANSIONS:STRANGER' {
        publishDir = [
            path: { "${params.outdir}/stranger" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}


//
// SNV calling options
//

process {
    withName: '.*CALL_SNV_DEEPVARIANT:DEEPVARIANT' {
        ext.when = { params.variant_caller.equals("deepvariant") }
        ext.args = { "--model_type=${params.analysis_type.toUpperCase()}" }
        ext.prefix = { "${meta.id}_deepvar" }
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:GLNEXUS' {
        ext.when = { params.variant_caller.equals("deepvariant") }
        ext.args = '--config DeepVariant_unfiltered'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:SPLIT_MULTIALLELICS_GL' {
        ext.when = { params.variant_caller.equals("deepvariant") }
        ext.args = '--output-type z --multiallelics -both'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:REMOVE_DUPLICATES_GL' {
        ext.when = { params.variant_caller.equals("deepvariant") }
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:TABIX_GL' {
        ext.when = { params.variant_caller.equals("deepvariant") }
        publishDir = [
            path: { "${params.outdir}/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:GATK4_SELECTVARIANTS' {
        ext.args   = "--exclude-intervals ${params.mt_contig_name}"
        ext.prefix = { "${meta.id}_nomito" }
        ext.when   = { params.annotate_snv_switch }
        publishDir = [
            path: { "${params.outdir}/glnexus/no_mito" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Structural variant calling options
//

process {
    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_MANTA:MANTA' {
        ext.prefix = { "${meta.id}_manta" }
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_TIDDIT:TIDDIT_SV' {
        ext.args   = '-p 6'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_TIDDIT:SVDB_MERGE_TIDDIT' {
        ext.args   = '--notag --pass_only'
        ext.prefix = { "${meta.id}_tiddit" }
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:GENERATE_PYTOR" {
        ext.args   = { params.cnvpytor_chr ? "-chrom ${params.cnvpytor_chr}" : '' }
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:HISTOGRAMS" {
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:PARTITIONS" {
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:CALL_CNVS" {
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:VIEW" {
        ext.prefix = { "${meta.id}_cnvpytor" }
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:SVDB_MERGE' {
        ext.args = '--pass_only'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*GENS:COLLECTREADCOUNTS' {
        ext.args = '--interval-merging-rule OVERLAPPING_ONLY'
    }

    withName: GENS {
        publishDir = [
            path: { "${params.outdir}/gens" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Structural variant annotation options
//

process {
    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:SVDB_QUERY' {
        ext.when = { params.annotate_sv_switch }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:PICARD_SORTVCF' {
        ext.when = { params.annotate_sv_switch }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:BCFTOOLS_VIEW' {
        ext.when = { params.annotate_sv_switch }
        ext.prefix = { "${meta.id}_view" }
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:ENSEMBLVEP_SV' {
        ext.when = { params.annotate_sv_switch }
        ext.args   = [
            '--plugin LoFtool,vep_cache/LoFtool_scores.txt',
            '--distance 5000',
            '--buffer_size 20000',
            '--format vcf --max_sv_size 248956422',
            '--appris --biotype --canonical --ccds --compress_output bgzip',
            '--domains --exclude_predicted --force_overwrite',
            '--humdiv --no_progress --no_stats --numbers',
            '--polyphen p --protein --offline --regulatory --sift p --symbol --tsl',
            '--uniprot'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/sv_annotate" },
            mode: params.publish_dir_mode,
        ]
    }
}

//
// Score and rank structural variants
//

process {
    withName: '.*RANK_VARIANTS_SV:GENMOD_ANNOTATE' {
        ext.when = { params.annotate_sv_switch }
        ext.args = {
            (params.genome == 'GRCh37') ? '--annotate_regions --genome-build 37' : '--annotate_regions --genome-build 38'
        }
    }

    withName: '.*RANK_VARIANTS_SV:GENMOD_SCORE' {
        ext.when = { params.annotate_sv_switch }
        ext.args = " --rank_results "
    }

    withName: '.*RANK_VARIANTS_SV:GENMOD_COMPOUND' {
        ext.when = { params.annotate_sv_switch }
        publishDir = [
            path: { "${params.outdir}/genmod" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// SNV annotation options
//

process {
    withName: '.*ANNOTATE_SNVS:VCFANNO' {
        ext.prefix = { "${meta.id}_vcfanno" }
        ext.when = { params.annotate_snv_switch }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:BCFTOOLS_ROH' {
        ext.when = { params.annotate_snv_switch }
        ext.args = { "--samples ${meta.id} --skip-indels " }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:RHOCALL_ANNOTATE' {
        ext.when = { params.annotate_snv_switch }
        ext.args = { "--v14 " }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:BCFTOOLS_VIEW' {
        ext.when = { params.annotate_snv_switch }
        ext.prefix = { "${meta.id}_view" }
        ext.args = { '--output-type z --exclude "INFO/GNOMADAF > 0.70 | INFO/GNOMADAF_popmax > 0.70  | INFO/SWEGENAF > 0.70" ' }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:GATK4_SELECTVARIANTS' {
        ext.when = { params.annotate_snv_switch }
        ext.prefix = { "${meta.id}_${intervals.simpleName}" }
        ext.when   = { params.annotate_snv_switch && !(params.analysis_type == "wes")}
        publishDir = [
            enabled: params.save_reference,
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ANNOTATE_SNVS:ENSEMBLVEP_SNV' {
        ext.when = { params.annotate_snv_switch }
        ext.prefix = { "${vcf.simpleName}_vep" }
        ext.args   = [
            '--plugin LoFtool,vep_cache/LoFtool_scores.txt',
            '--distance 5000',
            '--buffer_size 20000',
            '--format vcf --max_sv_size 248956422',
            '--appris --biotype --cache --canonical --ccds --compress_output bgzip',
            '--domains --exclude_predicted --force_overwrite',
            '--hgvs --humdiv --no_progress --no_stats --numbers',
            '--merged --polyphen p --protein --offline --regulatory --sift p --symbol --tsl',
            '--uniprot'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*ANNOTATE_SNVS:ZIP_TABIX_VEP' {
        ext.when = { params.annotate_snv_switch }
        ext.prefix = { "${input.simpleName}" }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
        ]
    }
}

//
// Merge mitochondrial and genomic vcfs
//

process {
    withName: 'RAREDISEASE:BCFTOOLS_CONCAT' {
        ext.prefix = { "${meta.id}_mito_genome_merged" }
    }
}

//
// Score and rank SNVs
//

process {
    withName: '.*RANK_VARIANTS_SNV:GENMOD_ANNOTATE' {
        ext.when = { params.annotate_snv_switch }
        ext.args = {
            (params.genome == 'GRCh37') ? '--annotate_regions --genome-build 37' : '--annotate_regions --genome-build 38'
        }
    }

    withName: '.*RANK_VARIANTS_SNV:GENMOD_MODELS' {
        ext.when = { params.annotate_snv_switch }
        ext.args = " --whole_gene "
    }

    withName: '.*RANK_VARIANTS_SNV:GENMOD_SCORE' {
        ext.when = { params.annotate_snv_switch }
        ext.args = " --rank_results "
    }

    withName: '.*RANK_VARIANTS_SNV:GENMOD_COMPOUND' {
        ext.when = { params.annotate_snv_switch }
        publishDir = [
            path: { "${params.outdir}/genmod" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}


//
// ANALYSE_MT:CONVERT_MT_BAM_TO_FASTQ
//

process {
    withName: '.*ANALYSE_MT:CONVERT_MT_BAM_TO_FASTQ:GATK4_PRINTREADS_MT' {
        beforeScript = {"mkdir ./tmp"}
        ext.when = { params.mt_fasta_shift && !(params.analysis_type == "wes") }
        ext.args = [
            "-L ${params.mt_contig_name}",
            "--read-filter MateOnSameContigOrNoMappedMateReadFilter",
            "--read-filter MateUnmappedAndUnmappedReadFilter"
        ].join(" ").trim()
    }

    withName: '.*ANALYSE_MT:CONVERT_MT_BAM_TO_FASTQ:GATK4_REVERTSAM_MT' {
        ext.when = { params.mt_fasta_shift && !(params.analysis_type == "wes") }
        ext.args = '--OUTPUT_BY_READGROUP false --VALIDATION_STRINGENCY LENIENT --ATTRIBUTE_TO_CLEAR FT --ATTRIBUTE_TO_CLEAR CO --SORT_ORDER queryname --RESTORE_ORIGINAL_QUALITIES false'
    }

    withName: '.*ANALYSE_MT:CONVERT_MT_BAM_TO_FASTQ:GATK4_SAMTOFASTQ_MT' {
        ext.when = { params.mt_fasta_shift && !(params.analysis_type == "wes") }
        ext.args = '--VALIDATION_STRINGENCY LENIENT'
    }
}

//
// ANALYSE_MT:ALIGN_AND_CALL_MT
//

process {
    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:BWAMEM2_MEM_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") && params.aligner == "bwamem2" }
        ext.args = { "-M -K 100000000 -R ${meta.read_group}" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:SENTIEON_BWAMEM_MT' {
        ext.args = { "-M -K 10000000 -R ${meta.read_group}" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") && params.aligner == "sentieon" }
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:GATK4_MERGEBAMALIGNMENT_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        ext.args = '--CREATE_INDEX true --MAX_GAPS -1  --SORT_ORDER queryname --INCLUDE_SECONDARY_ALIGNMENTS false --PAIRED_RUN false --VALIDATION_STRINGENCY LENIENT'
        ext.prefix = { "${meta.id}_merged" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:PICARD_ADDORREPLACEREADGROUPS_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        ext.args = { [
            "--VALIDATION_STRINGENCY LENIENT",
            "--RGLB lib",
            "--RGPL ILLUMINA",
            "--RGPU barcode",
            "--RGSM ${meta.id}"
        ].join(' ' ).trim() }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:PICARD_MARKDUPLICATES_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        ext.args = '--VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
        ext.prefix = { "${meta.id}_markduplicates" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:SAMTOOLS_SORT_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_sorted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:GATK4_MUTECT2_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        ext.args = '--mitochondria-mode TRUE'
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:GATK4_FILTERMUTECTCALLS_MT' {
        ext.prefix = { "${meta.id}_filtered" }
    }
}

//
// ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT
//

process {
    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:BWAMEM2_MEM_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") && params.aligner == "bwamem2" }
        ext.args = { "-M -K 100000000 -R ${meta.read_group}" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:SENTIEON_BWAMEM_MT' {
        ext.args = { "-M -K 10000000 -R ${meta.read_group}" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") && params.aligner == "sentieon" }
        ext.prefix = { "${meta.id}.sorted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:GATK4_MERGEBAMALIGNMENT_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.args = '--CREATE_INDEX true --MAX_GAPS -1  --SORT_ORDER queryname --INCLUDE_SECONDARY_ALIGNMENTS false --PAIRED_RUN false --VALIDATION_STRINGENCY LENIENT'
        ext.prefix = { "${meta.id}_merged_shifted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:PICARD_ADDORREPLACEREADGROUPS_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.args =  { [
            "--VALIDATION_STRINGENCY LENIENT",
            "--RGLB lib",
            "--RGPL ${params.platform}",
            "--RGPU barcode",
            "--RGSM ${meta.id}"
        ].join(' ' ).trim() }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:PICARD_MARKDUPLICATES_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.args = '--VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
        ext.prefix = { "${meta.id}_markduplicates_shifted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:SAMTOOLS_SORT_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_sorted_shifted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:GATK4_MUTECT2_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.args = '--mitochondria-mode TRUE'
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:HAPLOCHECK_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_shifted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT_SHIFT:GATK4_FILTERMUTECTCALLS_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals_shift && !(params.analysis_type == "wes") }
        ext.prefix = { "${meta.id}_filtered_shifted" }
    }
}

//
// ANALYSE_MT:MERGE_ANNOTATE_MT
//

process {

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:GATK4_MERGEVCFS_LIFT_UNLIFT_MT' {
        ext.prefix = { "${meta.id}_merged" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:GATK4_VARIANTFILTRATION_MT' {
        ext.prefix = { "${meta.id}_filt" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:SPLIT_MULTIALLELICS_MT' {
        ext.args = '--output-type z --multiallelics -both'
        ext.prefix = { "${meta.id}_split" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:TABIX_TABIX_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:REMOVE_DUPLICATES_MT' {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        publishDir = [
            path: { "${params.outdir}/gatk4" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:TABIX_TABIX_MT2' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:CHANGE_NAME_VCF_MT' {
        ext.file_type = 'vcf.gz'
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:BCFTOOLS_MERGE_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:HMTNOTE_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:TABIX_TABIX_MT3' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:ENSEMBLVEP_MT' {
        ext.args   = [
            '--plugin LoFtool,vep_cache/LoFtool_scores.txt',
            '--distance 0',
            '--buffer_size 20000',
            '--format vcf --vcf --max_sv_size 16600',
            '--appris --biotype --cache --canonical --ccds --compress_output bgzip',
            '--domains --exclude_predicted --force_overwrite',
            '--hgvs --humdiv --no_progress --numbers',
            '--merged --polyphen p --protein --offline --regulatory --sift p --symbol --tsl',
            '--uniprot'
        ].join(' ')
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
        publishDir = [
            path: { "${params.outdir}/mt_annotation" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*ANALYSE_MT:MERGE_ANNOTATE_MT:HAPLOGREP2_CLASSIFY_MT' {
        ext.when = { params.mt_fasta_shift && params.mt_intervals && !(params.analysis_type == "wes") }
    }

}

process  {
    withName: '.*ANALYSE_MT:PICARD_LIFTOVERVCF' {
        ext.when = { params.mt_fasta_shift && params.mt_backchain_shift && !(params.analysis_type == "wes") }
    }
}

//
// SENTIEON_TNSCOPE_MT_CALL
//

process {
    withName: '.*SENTIEON_TNSCOPE' {
        ext.args = { (params.genome == "GRCh37") ? " --interval MT " : "--interval chrM" }
        ext.args2 = " --min_init_normal_lod 0,5 --min_normal_lod 2,0 --min_init_tumor_lod 1,0 --min_tumor_lod 2,8 --trim_soft_clip "
    }
}
