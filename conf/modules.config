/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
        ext.when            = Conditional clause
----------------------------------------------------------------------------------------
*/

//
// General configuration options
//

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: '.*CHECK_INPUT:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CUSTOM_DUMPSOFTWAREVERSIONS' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}

//
// Read QC options
//

process {
    withName: 'FASTQC' {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/reports/fastqc/${meta.id}" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// Genome preparation options
//

process {
    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:BWAMEM2_INDEX' {
        ext.when = {!params.bwamem2_index && params.aligner == "bwamem2"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*{0123,amb,ann,bwt.2bit.64,bwt.8bit.32,pac}"
        ]
    }

    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:SENTIEON_BWAINDEX' {
        ext.when = {!params.sentieonbwa_index && params.aligner == "sentieon"}
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference
        ]
    }

    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:SAMTOOLS_FAIDX' {
        publishDir = [
            path: { "${params.outdir}/references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_reference,
            pattern: "*fai"
        ]
    }

    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:GET_CHROM_SIZES' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:PREPARE_GENOME:UNTAR_VCFANNO' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:CHECK_INPUT_VCF' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:SPLIT_MULTIALLELICS_PV' {
        ext.args = '--output-type z --multiallelics -both'
        ext.prefix = { "${meta.id}_split" }
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:REMOVE_DUPLICATES_PV' {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_VCF:TABIX_PV' {
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_BED:TABIX_.*' {
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_BED:GATK_BILT' {
        ext.prefix = { "${meta.id}_target" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_BED:GATK_ILT' {
        ext.args = '--PADDING 100 -SUBDIVISION_MODE INTERVAL_SUBDIVISION --SCATTER_COUNT 2'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*PREPARE_REFERENCES:CHECK_BED:CAT_CAT_BAIT' {
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*PREPARE_REFERENCES:TABIX_GNOMAD_AF' {
        ext.args   = '-s 1 -b 2 -e 2'
        publishDir = [
            path: { "${params.outdir}/processed_references" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Bwamem2 alignment options
//

process {
    withName: '.*ALIGN_BWAMEM2:.*' {
        ext.when = params.aligner.equals("bwamem2")
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            mode: 'copy',
            pattern: "*{stats,sorted_md.bam,sorted_md.bam.bai}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:BWAMEM2_MEM' {
        ext.args = { "-M -K 100000000 -R ${meta.read_group}" }
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            enabled: false,
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:SAMTOOLS_STATS' {
        ext.args = '-s --remove-overlaps'
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ALIGN:ALIGN_BWAMEM2:MARKDUPLICATES' {
        ext.prefix = { "${meta.id}_sorted_md" }
        publishDir = [
            path: { "${params.outdir}/bwamem2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// Sentieon alignment options
//

process {
    withName: '.*ALIGN_SENTIEON:.*' {
        ext.when = params.aligner.equals("sentieon")
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_BWAMEM' {
        ext.args = { "-M -K 10000000 -R ${meta.read_group} " }
        ext.prefix = { "${meta.id}.sorted" }
        publishDir = [
            path: { "${params.outdir}/sentieon_align" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_DATAMETRICS' {
        publishDir = [
            path: { "${params.outdir}/sentieon_bam_metrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_LOCUSCOLLECTOR' {
        publishDir = [
            path: { "${params.outdir}/sentieon_dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_DEDUP' {
        ext.args = { $params.rmdup ? "--rmdup" : '' }
        publishDir = [
            path: { "${params.outdir}/sentieon_dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ALIGN:ALIGN_SENTIEON:SENTIEON_BQSR' {
        publishDir = [
            path: { "${params.outdir}/sentieon_recal" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Sentieon SNV calling options
//

process {
    withName: '.*CALL_SNV_SENTIEON:.*' {
        ext.when = params.variant_caller.equals("sentieon")
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:SENTIEON_DNASCOPE' {
        ext.args2  = { [
            params.variant_type  ? "--var_type ${params.variant_type}"  : '',
            params.pcrfree       ? "--pcr_indel_model NONE"             : ''
        ].join(" ") }
        publishDir = [
            path: { "${params.outdir}/sentieon_dnascope" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV:CALL_SNV_SENTIEON:SENTIEON_DNAMODELAPPLY' {
        publishDir = [
            path: { "${params.outdir}/sentieon_dnamodelapply" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Bam QC options
//

process {
    withName: '.*QC_BAM:PICARD_COLLECTMULTIPLEMETRICS' {
        publishDir = [
            path: { "${params.outdir}/bamqc_collectmultiplemetrics" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:QUALIMAP_BAMQC' {
        publishDir = [
            path: { "${params.outdir}/bamqc_qualimap" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*QC_BAM:TIDDIT_COV' {
        ext.args = '-z 500 -w -u'
        publishDir = [
            path: { "${params.outdir}/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:UCSC_WIGTOBIGWIG' {
        ext.args = '-clip'
        publishDir = [
            path: { "${params.outdir}/tiddit_coverage" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*QC_BAM:MOSDEPTH' {
        ext.args = '--d4'
        publishDir = [
            path: { "${params.outdir}/mosdepth" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}

//
// Repeat expansion calling options
//

process {
    withName: '.*CALL_REPEAT_EXPANSIONS:EXPANSIONHUNTER' {
        publishDir = [
            path: { "${params.outdir}/expansionhunter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: STRANGER {
        publishDir = [
            path: { "${params.outdir}/stranger" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
}


//
// SNV calling options
//

process {
    withName: '.*CALL_SNV_DEEPVARIANT:DEEPVARIANT' {
        ext.args = { "--model_type=${params.analysis_type.toUpperCase()}" }
        ext.prefix = { "${meta.id}_deepvar" }
        publishDir = [
            path: { "${params.outdir}/deepvariant" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:GLNEXUS' {
        ext.args = '--config DeepVariant_unfiltered'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:SPLIT_MULTIALLELICS_GL' {
        ext.args = '--output-type z --multiallelics -both'
        publishDir = [
            enabled: false
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:REMOVE_DUPLICATES_GL' {
        ext.args = '--output-type z --rm-dup none'
        ext.prefix = { "${meta.id}_split_rmdup" }
        publishDir = [
            path: { "${params.outdir}/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*CALL_SNV_DEEPVARIANT:TABIX_GL' {
        publishDir = [
            path: { "${params.outdir}/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Structural variant calling options
//

process {
    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_MANTA:MANTA' {
        ext.prefix = { "${meta.id}_manta" }
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_TIDDIT:TIDDIT_SV' {
        ext.args   = '-p 6'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:CALL_SV_TIDDIT:SVDB_MERGE_TIDDIT' {
        ext.args   = '--notag --pass_only'
        ext.prefix = { "${meta.id}_tiddit" }
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:GENERATE_PYTOR" {
        ext.args   = { params.cnvpytor_chr ? "-chrom ${params.cnvpytor_chr}" : '' }
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:HISTOGRAMS" {
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:PARTITIONS" {
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:CALL_CNVS" {
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*CALL_STRUCTURAL_VARIANTS:CALL_CNV_CNVPYTOR:VIEW" {
        ext.prefix = { "${meta.id}_cnvpytor" }
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*CALL_STRUCTURAL_VARIANTS:SVDB_MERGE' {
        ext.args = '--pass_only'
        publishDir = [
            path: { "${params.outdir}/sv_caller" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: '.*GENS:COLLECTREADCOUNTS' {
        ext.args = '--interval-merging-rule OVERLAPPING_ONLY'
    }

    withName: GENS {
        publishDir = [
            path: { "${params.outdir}/gens" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// Structural variant annotation options
//

process {
    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:SVDB_QUERY' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:PICARD_SORTVCF' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:BCFTOOLS_VIEW' {
        publishDir = [
            enabled: false,
        ]
    }

    withName: '.*ANNOTATE_STRUCTURAL_VARIANTS:ENSEMBLVEP_SV' {
        ext.args   = [
            '--plugin LoFtool,vep_cache/LoFtool_scores.txt',
            '--distance 5000',
            '--buffer_size 20000',
            '--format vcf --max_sv_size 248956422',
            '--appris --biotype --canonical --ccds --compress_output bgzip',
            '--domains --exclude_predicted --force_overwrite',
            '--humdiv --no_progress --no_stats --numbers',
            '--polyphen p --protein --offline --regulatory --sift p --symbol --tsl',
            '--uniprot'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/sv_annotate" },
            mode: params.publish_dir_mode,
        ]
    }

}

//
// Score and rank structural variants
//

process {
    withName: '.*RANK_VARIANTS_SV:GENMOD_ANNOTATE' {
        ext.args = {
            (params.genome == 'GRCh37') ? '--annotate_regions --genome-build 37' : '--annotate_regions --genome-build 38'
        }
    }

    withName: '.*RANK_VARIANTS_SV:GENMOD_SCORE' {
        ext.args = " --rank_results "
    }

    withName: '.*RANK_VARIANTS_SV:GENMOD_COMPOUND' {
        publishDir = [
            path: { "${params.outdir}/genmod" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}

//
// SNV annotation options
//

process {
    withName: '.*ANNOTATE_SNVS:VCFANNO' {
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:BCFTOOLS_ROH' {
        ext.args = { "--samples ${meta.id} --skip-indels " }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:RHOCALL_ANNOTATE' {
        ext.args = { "--v14 " }
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: '.*ANNOTATE_SNVS:ENSEMBLVEP_SNV' {
        ext.args   = [
            '--plugin LoFtool,vep_cache/LoFtool_scores.txt',
            '--distance 5000',
            '--buffer_size 20000',
            '--format vcf --max_sv_size 248956422',
            '--appris --biotype --cache --canonical --ccds --compress_output bgzip',
            '--domains --exclude_predicted --force_overwrite',
            '--hgvs --humdiv --no_progress --no_stats --numbers',
            '--merged --polyphen p --protein --offline --regulatory --sift p --symbol --tsl',
            '--uniprot'
        ].join(' ')
        publishDir = [
            path: { "${params.outdir}/snv_annotation" },
            mode: params.publish_dir_mode,
        ]
    }
}

//
// Score and rank SNVs
//

process {
    withName: '.*RANK_VARIANTS_SNV:GENMOD_ANNOTATE' {
        ext.args = {
            (params.genome == 'GRCh37') ? '--annotate_regions --genome-build 37' : '--annotate_regions --genome-build 38'
        }
    }

    withName: '.*RANK_VARIANTS_SNV:GENMOD_MODELS' {
        ext.args = " --whole_gene "
    }

    withName: '.*RANK_VARIANTS_SNV:GENMOD_SCORE' {
        ext.args = " --rank_results "
    }

    withName: '.*RANK_VARIANTS_SNV:GENMOD_COMPOUND' {
        publishDir = [
            path: { "${params.outdir}/genmod" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}


//
// ANALYSE_MT:PREPARE_MT_ALIGNMENT
//

process {
    withName: '.*ANALYSE_MT:PREPARE_MT_ALIGNMENT:SAMTOOLS_VIEW_MT' {
        ext.args = { '-h ' }
        ext.args2 = { (params.genome == "GRCh37") ? "MT" : "chrM" }
    }

    withName: '.*ANALYSE_MT:PREPARE_MT_ALIGNMENT:GATK4_REVERTSAM_MT' {
        ext.args = '--OUTPUT_BY_READGROUP false --VALIDATION_STRINGENCY LENIENT --ATTRIBUTE_TO_CLEAR FT --ATTRIBUTE_TO_CLEAR CO --SORT_ORDER queryname --RESTORE_ORIGINAL_QUALITIES false'
    }

    withName: '.*ANALYSE_MT:PREPARE_MT_ALIGNMENT:GATK4_SAMTOFASTQ_MT' {
        ext.args = '--VALIDATION_STRINGENCY LENIENT'
    }
}

//
// ANALYSE_MT:ALIGN_AND_CALL_MT
//

process {
    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:BWAMEM2_MEM_MT' {
        ext.args = { "-M -K 100000000 -R \"@RG\\tID:${meta.id}\\tSM:${meta.sample}\\tLB:${meta.library}\\tPL:illumina\"" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:GATK4_MERGEBAMALIGNMENT_MT' {
        ext.args = '--CREATE_INDEX true --MAX_GAPS -1  --SORT_ORDER queryname --INCLUDE_SECONDARY_ALIGNMENTS false --PAIRED_RUN false --VALIDATION_STRINGENCY LENIENT'
        ext.prefix = { "${meta.id}_merged" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:PICARD_ADDORREPLACEREADGROUPS_MT' {
        ext.args = '--VALIDATION_STRINGENCY LENIENT'
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:PICARD_MARKDUPLICATES_MT' {
        ext.args = '--VALIDATION_STRINGENCY LENIENT --CREATE_INDEX true'
        ext.prefix = { "${meta.id}_markduplicates" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:SAMTOOLS_SORT_MT' {
        ext.prefix = { "${meta.id}_sorted" }
    }

    withName: '.*ANALYSE_MT:ALIGN_AND_CALL_MT:GATK4_MUTECT2_MT' {
        ext.args = '--mitochondria-mode TRUE'
        }
}

//
// SENTIEON_TNSCOPE_MT_CALL
//

process {
    withName: '.*SENTIEON_TNSCOPE' {
        ext.args = { (params.genome == "GRCh37") ? " --interval MT " : "--interval chrM" }
        ext.args2 = " --min_init_normal_lod 0,5 --min_normal_lod 2,0 --min_init_tumor_lod 1,0 --min_tumor_lod 2,8 --trim_soft_clip "
    }
}
